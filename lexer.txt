CONSTTK const
INTTK int
IDENFR aaaaaa
ASSIGN =
INTCON 100
COMMA ,
IDENFR bbbbbb
ASSIGN =
INTCON 200
COMMA ,
IDENFR cccccc
ASSIGN =
INTCON 300
SEMICN ;
CONSTTK const
INTTK int
IDENFR MAX
ASSIGN =
INTCON 1000000
SEMICN ;
CONSTTK const
CHARTK char
IDENFR MAX_CHAR
ASSIGN =
CHRCON 'z'
SEMICN ;
CONSTTK const
INTTK int
IDENFR dp
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR dp1
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR fas
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
STRCON "dsadsa"
SEMICN ;
INTTK int
IDENFR isPrime
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
LEQ <=
INTCON 1
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
MULT *
IDENFR i
LEQ <=
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR getAChar
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR getSum
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
SEMICN ;
RBRACE }
INTTK int
IDENFR getSum1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
DIV /
IDENFR c
SEMICN ;
RBRACE }
CHARTK char
IDENFR getAChar1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR getAChar
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR sumOne2Ten
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LEQ <=
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR i
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR sumOne2Ten1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LEQ <=
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR i
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR sum
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR BubbleSort
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR len
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR len
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
IDENFR len
MINU -
IDENFR i
MINU -
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR arr
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR temp
ASSIGN =
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR temp
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR flag
EQL ==
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR love
ASSIGN =
CHRCON 'l'
SEMICN ;
CONSTTK const
INTTK int
IDENFR age
ASSIGN =
INTCON 20
SEMICN ;
INTTK int
IDENFR aaaaaa
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
CHARTK char
IDENFR bbbbb
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
STRCON "dsadsa"
SEMICN ;
INTTK int
IDENFR newBestScoreF
SEMICN ;
IDENFR newBestScoreF
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
CHARTK char
IDENFR newBestScoreA
SEMICN ;
IDENFR newBestScoreA
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
IDENFR k
SEMICN ;
IDENFR j
ASSIGN =
NOT !
IDENFR j
SEMICN ;
INTTK int
IDENFR now
ASSIGN =
INTCON 0
COMMA ,
IDENFR pre
ASSIGN =
INTCON 0
COMMA ,
IDENFR temp
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR nowChar
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR preChar
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR tempChar
ASSIGN =
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371147\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %c\n"
COMMA ,
IDENFR newBestScoreF
COMMA ,
IDENFR newBestScoreA
RPARENT )
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR cnt
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR iMax
ASSIGN =
INTCON 100
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
IDENFR iMax
RPARENT )
BREAKTK break
SEMICN ;
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 100
RPARENT )
BREAKTK break
SEMICN ;
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 100
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 100
RPARENT )
BREAKTK break
SEMICN ;
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 100
RPARENT )
BREAKTK break
SEMICN ;
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 100
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 50
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 50
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
SEMICN ;
RBRACE }
RBRACE }
IDENFR cnt
ASSIGN =
IDENFR cnt
MULT *
INTCON 10
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
DIV /
INTCON 2
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
MOD %
INTCON 3
SEMICN ;
IDENFR cnt
ASSIGN =
LPARENT (
IDENFR cnt
PLUS +
LPARENT (
INTCON 4
MULT *
INTCON 78
DIV /
INTCON 2
RPARENT )
RPARENT )
MINU -
INTCON 99
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
MINU -
IDENFR cnt
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR cnt
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
MINU -
IDENFR cnt
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR cnt
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
SEMICN ;
RBRACE }
CHARTK char
IDENFR x
ASSIGN =
CHRCON 'x'
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GEQ >=
CHRCON 'a'
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
LEQ <=
CHRCON 'z'
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
NEQ !=
CHRCON 'z'
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
EQL ==
CHRCON 'z'
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
MINU -
INTCON 10
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR cnt
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR getSum
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
IDENFR cnt
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
LPARENT (
INTCON 2
MULT *
INTCON 3
DIV /
INTCON 4
PLUS +
INTCON 5
MINU -
INTCON 6
RPARENT )
MULT *
INTCON 7
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR ans
ASSIGN =
IDENFR cnt
SEMICN ;
INTTK int
IDENFR ans1
ASSIGN =
LPARENT (
INTCON 2
MULT *
INTCON 3
DIV /
INTCON 4
PLUS +
INTCON 5
MINU -
INTCON 6
RPARENT )
MULT *
INTCON 7
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %c %d %c %c %d %c %d %d %d %d\n"
COMMA ,
IDENFR cnt
COMMA ,
IDENFR love
COMMA ,
IDENFR age
COMMA ,
IDENFR getAChar
LPARENT (
RPARENT )
COMMA ,
IDENFR getAChar1
LPARENT (
RPARENT )
COMMA ,
IDENFR getSum
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
IDENFR age
RPARENT )
COMMA ,
IDENFR x
COMMA ,
IDENFR cnt
COMMA ,
IDENFR ans
COMMA ,
IDENFR ans1
COMMA ,
IDENFR getSum1
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
IDENFR sumOne2Ten
LPARENT (
RPARENT )
SEMICN ;
IDENFR sumOne2Ten1
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ans2
ASSIGN =
IDENFR cnt
SEMICN ;
IFTK if
LPARENT (
IDENFR ans2
GRE >
INTCON 0
AND &&
IDENFR ans2
LSS <
INTCON 100
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR ans2
MOD %
INTCON 2
EQL ==
INTCON 0
OR ||
IDENFR ans2
MOD %
INTCON 3
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ans2
MOD %
INTCON 5
EQL ==
INTCON 0
OR ||
IDENFR isPrime
LPARENT (
IDENFR ans2
RPARENT )
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ans2
RPARENT )
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 30
RBRACK ]
ASSIGN =
LBRACE {
MINU -
INTCON 1
COMMA ,
MINU -
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 34
COMMA ,
INTCON 5
COMMA ,
INTCON 16
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
MINU -
INTCON 9
COMMA ,
INTCON 10
COMMA ,
INTCON 131
COMMA ,
MINU -
INTCON 12
COMMA ,
INTCON 13
COMMA ,
INTCON 124
COMMA ,
INTCON 15
COMMA ,
INTCON 16
COMMA ,
INTCON 137
COMMA ,
MINU -
INTCON 18
COMMA ,
INTCON 19
RBRACE }
SEMICN ;
INTTK int
IDENFR gg
ASSIGN =
INTCON 0
SEMICN ;
IDENFR gg
ASSIGN =
PLUS +
PLUS +
IDENFR gg
SEMICN ;
INTTK int
IDENFR len
ASSIGN =
INTCON 20
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR len
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
IDENFR len
MINU -
IDENFR i
MINU -
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR arr
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR temp
ASSIGN =
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR temp
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR flag
EQL ==
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d%d%d\n"
COMMA ,
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
