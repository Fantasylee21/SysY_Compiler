INTTK int
IDENFR a
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
LEQ <=
INTCON 35
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
MINU -
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
IDENFR t
MINU -
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
LBRACK [
IDENFR n
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
