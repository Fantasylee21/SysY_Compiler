INTTK int
IDENFR globalNumbers
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
CHARTK char
IDENFR globalCharacters
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR globalCount
ASSIGN =
INTCON 5
SEMICN ;
CHARTK char
IDENFR globalSwitch
ASSIGN =
CHRCON 'M'
SEMICN ;
CHARTK char
IDENFR classifyChar
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GEQ >=
CHRCON 'A'
AND &&
IDENFR c
LEQ <=
CHRCON 'Z'
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'U'
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR c
GEQ >=
CHRCON 'a'
AND &&
IDENFR c
LEQ <=
CHRCON 'z'
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'L'
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
CHRCON 'N'
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
CHRCON 'E'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printIntegerArray
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR len
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR len
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Array[%d]: %d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR localArray
LBRACK [
INTCON 7
RBRACK ]
SEMICN ;
CHARTK char
IDENFR charArray
LBRACK [
INTCON 8
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'A'
RBRACE }
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR printIntegerArray
LPARENT (
IDENFR localArray
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
CHARTK char
IDENFR classified
ASSIGN =
IDENFR classifyChar
LPARENT (
IDENFR charArray
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Char %c classified as: %c\n"
COMMA ,
IDENFR charArray
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR classified
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
