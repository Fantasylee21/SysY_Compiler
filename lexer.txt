INTTK int
IDENFR n
SEMICN ;
VOIDTK void
IDENFR print_move
LPARENT (
INTTK int
IDENFR a
COMMA ,
CHARTK char
IDENFR from
COMMA ,
CHARTK char
IDENFR to
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Moca move otter %d from queue %c to queue %c\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR from
COMMA ,
IDENFR to
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR move
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR len
COMMA ,
CHARTK char
IDENFR from
COMMA ,
CHARTK char
IDENFR by
COMMA ,
CHARTK char
IDENFR to
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR len
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR print_move
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR from
COMMA ,
IDENFR to
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
IDENFR move
LPARENT (
IDENFR a
COMMA ,
IDENFR len
MINU -
INTCON 1
COMMA ,
IDENFR from
COMMA ,
IDENFR to
COMMA ,
IDENFR by
RPARENT )
SEMICN ;
IDENFR print_move
LPARENT (
IDENFR a
LBRACK [
IDENFR len
MINU -
INTCON 1
RBRACK ]
COMMA ,
IDENFR from
COMMA ,
IDENFR to
RPARENT )
SEMICN ;
IDENFR move
LPARENT (
IDENFR a
COMMA ,
IDENFR len
MINU -
INTCON 1
COMMA ,
IDENFR by
COMMA ,
IDENFR from
COMMA ,
IDENFR to
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR n
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 200
RBRACK ]
COMMA ,
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR move
LPARENT (
IDENFR a
COMMA ,
IDENFR n
COMMA ,
CHRCON 'A'
COMMA ,
CHRCON 'B'
COMMA ,
CHRCON 'C'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
